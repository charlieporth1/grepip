#!/bin/bash
# By Av'tW
# Date: 2015-04-23
# No License
# No Warranty

#
##
###
#### Options you may want to change vvvvvvv (see below)
#
# Change the name of the grep command below if GNU grep has a different name
# (it won't probably work without modification using non-GNU grep commands)
grepBinary=grep
#
# Change this to 6 to switch to IPv6 by default (otherwise add -6 to the CLI)
IPVersion=4
#
#### Options you may want to change ^^^^^^ (see above)
###
##
#

progName="$( basename "$0" )"
version=0.2
define(){ IFS='\n' read -r -d '' ${1} || true; }

define helpString <<EOF
$progName v$version - extract and show IP addresses (IPv4 or IPv6), one per line
Syntax: somecommand | $progName [OPTIONS]

OPTIONS:
 -x --no-local      Exclude local IPs
                     For IPv4: 127.0.*, 10.*, 172.16.*-172.31.*, 192.168.*
                     For IPv6: ::/0, ::1/128, fe80:/10, fc00:/7 
 -4                 Enable IPv4 mode (the default)
 -6                 Enable IPv6 mode
 -46
 -o only
 --help -h          Show help and exit
 --version -v       Show version and exit
EOF


warn() { local fmt="$1"; shift; printf "$progName: $fmt\n" "$@"     >&2; }
die () { local st="$?"; warn "$@"; exit "$st"; } 

for i in "$@"; do
    case $i in
        --help | -h ) shift; echo "$helpString" ; exit 0 ;;
        --version | -v ) shift; echo "$version"; exit 0 ;;
        -x | --no-local ) shift ; optNoLocal=1;;
        -4 ) shift ; IPVersion=4;;
        -6 ) shift ; IPVersion=6;;
        -46 ) shift ; IPVersion=46;;
#        -* ) die "Unknown option: $1";;
        -* ) other_grep_options="$other_grep_options $1";;
        *) ;;
    esac
done

regexIPv4="(?<![0-9]\.)(?<![0-9])((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?!\.[0-9])"
regexIPv6="(\
([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|\
([0-9a-fA-F]{1,4}:){1,7}:|\
([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|\
([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|\
([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|\
([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|\
([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|\
[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|\
:((:[0-9a-fA-F]{1,4}){1,7}|:)|\
fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|\
::(ffff(:0{1,4}){0,1}:){0,1}\
((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}\
(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|\
([0-9a-fA-F]{1,4}:){1,4}:\
((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}\
(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\
)(/(12[0-8]|1[01][0-9]|[0-9][0-9]|[0-9]))?"

case $IPVersion in
    4) filter="grep -oP -e '$regexIPv4'" ;;
    6) filter="grep -oE -e '$regexIPv6' | grep -v -e '::/[^0-9]' -e '^::$'" ;;
    46) filter="grep -oP -e '($regexIPv4|$regexIPv6)'" ;;
    *) die "Unknown IPVersion: $IPVersion";;
esac

if [[ -n $optNoLocal ]]; then

    # -x will filter out local IPv4 networks (RFC1918)
    #                and loop back addresses (127.*, as defined by RFC3330)
    # --------------------------------------------------------------------------- 
    # 10.0.0.0 - 10.255.255.255       10.0.0.0/8)    single class A network
    # 172.16.0.0 - 172.31.255.255     172.16.0.0/12  16 contiguous class B networks
    # 192.168.0.0 - 192.168.255.255   192.168.0.0/16 256 contiguous class C networks
    # --------------------------------------------------------------------------- 
    if [[ $IPVersion -eq 4 ]]; then
        filterNoLocal=" | grep -vE -e '192.168(\.[0-9]{1,3}){2}' \
                                   -e '10(\.[0-9]{1,3}){3}' \
                                   -e '172.(1[6-9]|2[0-9]|3)(\.[0-9]{1,3}){2}' \
                                   -e '127(\.[0-9]{1,3}){3}'"
    elif [[ $IPVersion -eq 6 ]]; then
        # ::1/128, ::/0, fe80:/10, fc00:/7 
        filterNoLocal=" | grep -viE -e '^(0{0,4}:)+0?0?0?1(/[0-9]+)?$' \
                                    -e '^(0{0,4}:)+0{0,4}(/[0-9]+)?$' \
                                    -e '^fe80:' \
                                    -e '^fc00:'"
    else 
        die "Unknown IPVersion: $IPVersion"
    fi
fi

while read line; do eval "echo \"$line\" | $filter $filterNoLocal"; done
